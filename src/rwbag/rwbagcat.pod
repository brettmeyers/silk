=pod

=head1 NAME

B<rwbagcat> - Output a binary Bag as text.

=head1 SYNOPSIS

  rwbagcat [ --network-structure[=STRUCTURE] | --bin-ips[=SCALE] ]
        [--print-statistics[=OUTFILE]]
        [--minkey=VALUE] [--maxkey=VALUE] [--mask-set=PATH]
        [--mincounter=VALUE] [--maxcounter=VALUE] [--zero-counts]
        [--output-path=OUTPUTFILE]
        [--key-format=FORMAT] [--integer-keys] [--zero-pad-ips]
        [--no-columns] [--column-separator=C]
        [--no-final-delimiter] [{--delimited | --delimited=C}]
        [--pager=PAGER_PROG] [BAGFILE...]

  rwbagcat --help

  rwbagcat --version

=head1 DESCRIPTION

B<rwbagcat> reads a binary Bag as created by B<rwbag(1)> or
B<rwbagbuild(1)>, converts it to text, and outputs it to the standard
output or the specified file.  It can also print various statistics
and summary information about the Bag.

B<rwbagcat> reads the I<BAGFILE>s specified on the command line; if no
I<BAGFILE> arguments are given, B<rwbagcat> attempts to read the Bag
from the standard input.  I<BAGFILE> may also explicitly be the
keyword C<stdin> or a hyphen (C<->) to allow B<rwbagcat> to combine
files and piped input.  If any input does not contain a Bag,
B<rwbagcat> prints an error to the standard error and exits
abnormally.

When multiple I<BAGFILE>s are specified, each is handled individually;
to process the combination of the I<BAGFILE>s, invoke B<rwbagcat> on
the output from B<rwbagtool(1)>.

=head1 OPTIONS

Option names may be abbreviated if the abbreviation is unique or is an
exact match for an option.  A parameter to an option may be specified
as B<--arg>=I<param> or S<B<--arg> I<param>>, though the first form is
required for options that take optional parameters.

=over 4

=item B<--network-structure>

=item B<--network-structure>=I<STRUCTURE>

For each numeric value in I<STRUCTURE>, group the IPs in the Bag into
a netblock of that size and print the number of hosts, the sum of the
counters, and, optionally, print the number of smaller, occupied
netblocks that each larger netblock contains.  When I<STRUCTURE>
begins with C<v6:>, the IPs in the Bag are treated as IPv6 addresses,
and any IPv4 addresses are mapped into the ::ffff:0:0/96 netblock.
Otherwise, the IPs are treated as IPv4 addresses, and any IPv6 address
outside the ::ffff:0:0/96 netblock is ignored.  Aside from the initial
C<v6:> (or C<v4:>, for consistency), I<STRUCTURE> has one of following
forms:

=over 4

=item 1

I<NETBLOCK_LIST>B</>I<SUMMARY_LIST>.  Group IPs into the sizes
specified in either I<NETBLOCK_LIST> or I<SUMMARY_LIST>.  B<rwbagcat>
prints a row for each occupied netblock specified in I<NETBLOCK_LIST>,
where the row lists the base IP of the netblock, the sum of the
counters for that netblock, the number of hosts, and the number of
smaller, occupied netblocks having a size that appears in either
I<NETBLOCK_LIST> or I<SUMMARY_LIST>.  (The values in I<SUMMARY_LIST>
are only summarized; they are not printed.)

=item 2

I<NETBLOCK_LIST>B</>.  Similar to the first form, except all occupied
netblocks are printed, and there are no netblocks that are only
summarized.

=item 3

I<NETBLOCK_LIST>B<S>.  When the character C<S> appears anywhere in the
I<NETBLOCK_LIST>, B<rwbagcat> provides a default value for the
I<SUMMARY_LIST>.  That default is 8,16,24,27 for IPv4, and 48,64 for
IPv6.

=item 4

I<NETBLOCK_LIST>.  When neither C<S> nor C</> appear in I<STRUCTURE>,
the output does not include the number of smaller, occupied netblocks.

=item 5

Empty.  When I<STRUCTURE> is empty or only contains C<v6:> or C<v4:>,
the I<NETBLOCK_LIST> prints a single row for the total network (the /0
netblock) giving the number of hosts, the sum of the counters, and the
number of smaller, occupied netblocks using the same default list
specified in form 3.

=back

I<NETBLOCK_LIST> and I<SUMMARY_LIST> contain a comma separated list of
numbers between 0 (the total network) and the size for an individual
host (32 for IPv4 or 128 for IPv6).  The characters C<T> and C<H> may
be used as aliases for 0 and the host netblock, respectively.  In
addition, when parsing the lists as IPv4 netblocks, the characters
C<A>, C<B>, C<C>, and C<X> are supported as aliases for 8, 16, 24, and
27, respectively.  A comma is not required between adjacent letters.
The B<--network-structure> switch disables printing of the IPs in the
Bag file; specify the C<H> argument to the switch to print each
individual IP address and its counter.

=item B<--bin-ips>

=item B<--bin-ips>=I<SCALE>

Invert the bag and count the total number of unique IP addresses for a
given value of the volume bin.  For example, turn a Bag {sip:flow}
into {flow:count(sip)}.  I<SCALE> is a string containing the value
C<linear>, C<binary>, or C<decimal>.

=over 4

=item *

The default behavior is C<linear>: Each distinct counter gets its own
bin.  Any counter in the input Bag file that is larger than the
maximum possible key will be attributed to the maximum key; to prevent
this, specify C<--maxcounter=4294967295>.

=item *

C<binary> creates a bag of {log2(flow):count(sip)}.
Bin C<n> contains counts in the range S<C<[ 2^n, 2^(n+1) )>>.

=item *

C<decimal> creates one hundred bins for each counter in the
range [1,100), and one hundred bins for each counter in the
range [100,1000), each counter in the range [1000,10000),
etc.  Counters are logarithmically distributed among the
bins.

=back

=item B<--print-statistics>

=item B<--print-statistics>=I<OUTFILE>

Print out breakdown of the network hosts seen, and print out general
statistics about the keys and counters.

=over 4

=item *

count of unique keys

=item *

sum of all the counters

=item *

minimum key

=item *

maximum key

=item *

minimum counter

=item *

maximum counter

=item *

mean of counters

=item *

variance of counters

=item *

standard deviation of counters

=item *

skew of counters

=item *

kurtosis of counters

=item *

count of nodes allocated

=item *

total bytes allocated for nodes

=item *

count of leaves allocated

=item *

total bytes allocated for leaves

=item *

density of the data

=back

I<OUTFILE> is a filename, named pipe, the values C<stdout> or C<-> to
print to the standard output, or the value C<stderr> to print to the
standard error.  Defaults to printing to the standard output.

=item B<--minkey>=I<VALUE>

Output records whose key value is at least I<VALUE>.  I<VALUE> may be
an IP address or an integer in the range 0 to 4294967295 inclusive.
The default is to print all records with a non-zero counter.

=item B<--maxkey>=I<VALUE>

Output records whose key value is not more than I<VALUE>.  I<VALUE>
may be an IP address or an integer in the range 0 to 4294967295
inclusive.  The default is to print all records with a non-zero counter.

=item B<--mask-set>=I<PATH>

Output records whose key appears in the binary IPset read from the
file I<PATH>.  (To build an IPset, use B<rwset(1)> or
B<rwsetbuild(1)>.)  When used with B<--minkey> and/or B<--maxkey>,
output records whose key is in the IPset and is also within when the
specified range.

=item B<--mincounter>=I<VALUE>

Output records whose counter value is at least I<VALUE>.  I<VALUE> is
an integer in the range 1 to 18446744073709551615.  The default is to
print all records with a non-zero counter; use B<--zero-counts> to
show records whose counter is 0.

=item B<--maxcounter>=I<VALUE>

Output records whose counter value is not more than I<VALUE>.
I<VALUE> is an integer in the range 1 to 18446744073709551615, with
the default being the maximum counter value.

=item B<--zero-counts>

Print keys whose counter is zero.  Normally, keys with a counter of
zero are suppressed since all keys have a default counter of zero.  In
order to use this flag, either B<--mask-set> or both B<--minkey> and
B<--maxkey> must be specified.  When this switch is specified, any
counter limit explicitly set by the B<--maxcounter> switch will still
be applied.

=item B<--output-path>=I<OUTPUTFILE>

Redirect output of the B<--network-structure> or B<--bin-ips> options
to I<OUTPUTFILE>.  I<OUTPUTFILE> is a filename, named pipe, or the
values C<stdout> or C<-> to print to the standard output.

=item B<--key-format>=I<FORMAT>

Specify the format to use when printing the keys.  When this switch is
not specified, a Bag whose keys are known not to be IP addresses are
printed as decimal numbers, and the keys for all other Bags are
printed as IP addresses in the canonical format.  The I<FORMAT> is one
of:

=over 4

=item canonical

Print keys as IP addresses in the canonical format: dotted quad for
IPv4 (C<127.0.0.1>) and hexadectet for IPv6 (C<2001:db8::1>).  Note
that IPv6 addresses in ::ffff:0:0/96 and some IPv6 addresses in ::/96
will be printed as a mixture of IPv6 and IPv4.

=item zero-padded

Print keys as IP addresses in their canonical form, but add zeros to
the output so it fully fills the width of column.  The addresses
C<127.0.0.1> and C<2001:db8::1> are printed as C<127.000.000.001> and
C<2001:0db8:0000:0000:0000:0000:0000:0001>, respectively.

=item decimal

Print keys as integers in decimal format.  The addresses C<127.0.0.1>
and C<2001:db8::1> are printed as C<2130706433> and
C<42540766411282592856903984951653826561>, respectively.

=item hexadecimal

Print keys as integers in hexadecimal format.  The addresses
C<127.0.0.1> and C<2001:db8::1> are printed as C<7f000001> and
C<20010db8000000000000000000000001>, respectively.

=item force-ipv6

Print all keys as IP addresses in the canonical form for IPv6 without
using any IPv4 notation.  Any integer key or IPv4 address is mapped
into the ::ffff:0:0/96 netblock.  The addresses C<127.0.0.1> and
C<2001:db8::1> are printed as C<::ffff:7f00:1> and C<2001:db8::1>,
respectively.

=back

=item B<--integer-keys>

This switch is equivalent to B<--key-format=decimal>, it is deprecated
as of SiLK 3.7.0, and it will be removed in the SiLK 4.0 release.

=item B<--zero-pad-ips>

This switch is equivalent to B<--key-format=zero-padded>, it is
deprecated as of SiLK 3.7.0, and it will be removed in the SiLK 4.0
release.

=item B<--no-columns>

Disable fixed-width columnar output.

=item B<--column-separator>=I<C>

Use specified character between columns and after the final column.
When this switch is not specified, the default of 'B<|>' is used.

=item B<--no-final-delimiter>

Do not print the column separator after the final column.  Normally a
delimiter is printed.  When the network summary is requested
(B<--network-structure=S>), the separator is always printed before the
summary column and never that column.

=item B<--delimited>

=item B<--delimited>=I<C>

Run as if B<--no-columns> B<--no-final-delimiter> B<--column-sep>=I<C>
had been specified.  That is, disable fixed-width columnar output; if
character I<C> is provided, it is used as the delimiter between
columns instead of the default 'B<|>'.

=item B<--pager>=I<PAGER_PROG>

When output is to a terminal, invoke the program I<PAGER_PROG> to view
the output one screen full at a time.  This switch overrides the
SILK_PAGER environment variable, which in turn overrides the PAGER
variable.  If the value of the pager is determined to be the empty
string, no paging will be performed and all output will be printed to
the terminal.

=item B<--help>

Print the available options and exit.

=item B<--version>

Print the version number and information about how SiLK was
configured, then exit the application.

=back

=head1 EXAMPLES

In the following examples, the dollar sign (C<$>) represents the shell
prompt.  The text after the dollar sign represents the command line.

=for comment
Lines have been wrapped for improved readability, and the back slash
(C<\>) is used to indicate a wrapped line.

To print the bag:

 $ rwbagcat mybag.bag
      172.23.1.1|              5|
      172.23.1.2|            231|
      172.23.1.3|              9|
      172.23.1.4|             19|
   192.168.0.100|              1|
   192.168.0.101|              1|
   192.168.0.160|             15|
  192.168.20.161|              1|
  192.168.20.162|              5|
  192.168.20.163|              5|


To print it with full network:

 $ rwbagcat --network-structure=TABCHX mybag.bag
           172.23.1.1      |              5|
           172.23.1.2      |            231|
           172.23.1.3      |              9|
           172.23.1.4      |             19|
         172.23.1.0/27     |            264|
       172.23.1.0/24       |            264|
     172.23.0.0/16         |            264|
   172.0.0.0/8             |            264|
           192.168.0.100   |              1|
           192.168.0.101   |              1|
         192.168.0.96/27   |              2|
           192.168.0.160   |             15|
         192.168.0.160/27  |             15|
       192.168.0.0/24      |             17|
           192.168.20.161  |              1|
           192.168.20.162  |              5|
           192.168.20.163  |              5|
         192.168.20.160/27 |             11|
       192.168.20.0/24     |             11|
     192.168.0.0/16        |             28|
   192.0.0.0/8             |             28|
 TOTAL                     |            292|

Or an abbreviated network structure by class A and C only,
including summary information:

 $ rwbagcat --network-structure=ACS mybag.bag
     172.23.1.0/24     |            264| 4 hosts in 1 /27
 172.0.0.0/8           |            264| 4 hosts in 1 /16, 1 /24, and 1 /27
     192.168.0.0/24    |             17| 3 hosts in 2 /27s
     192.168.20.0/24   |             11| 3 hosts in 1 /27
 192.0.0.0/8           |             28| 6 hosts in 1 /16, 2 /24s, and 3 /27s


To bin by number of unique IP addresses by volume:

 $ rwbagcat --bin-ips mybag.bag
               1|              3|
               5|              3|
               9|              1|
              15|              1|
              19|              1|
             231|              1|

This means there were 3 source hosts in the bag that had a
single flow; 3 hosts that had 5 flows; and one host each that
had 9, 15, 19, and 231 flows.

For a log2 breakdown of the counts:

 $ rwbagcat --bin-ips=binary mybag.bag
    2^0 to 2^1-1|              3|
    2^2 to 2^3-1|              3|
    2^3 to 2^4-1|              2|
    2^4 to 2^5-1|              1|
    2^7 to 2^8-1|              1|


Statistics:

 $ rwbagcat --stats mybag.bag

 Statistics
               keys:  10
    sum of counters:  292
        minimum key:  172.23.1.1
        maximum key:  192.168.20.163
      minimum count:  1
      maximum count:  231
               mean:  29.2
           variance:  5064
 standard deviation:  71.16
               skew:  2.246
           kurtosis:  8.1

 $ rwbagcat --tree-stats mybag.bag
    nodes allocated:  5 (10240 bytes)
   leaves allocated:  4 (1024 bytes)
      keys inserted:  10 (10 unique)
    counter density:  7.81%

=head1 ENVIRONMENT

=over 4

=item SILK_CLOBBER

The SiLK tools normally refuse to overwrite existing files.  Setting
SILK_CLOBBER to a non-empty value removes this restriction.

=item SILK_PAGER

When set to a non-empty string, B<rwbagcat> automatically invokes this
program to display its output a screen at a time.  If set to an empty
string, B<rwbagcat> does not automatically page its output.

=item PAGER

When set and SILK_PAGER is not set, B<rwbagcat> automatically invokes
this program to display its output a screen at a time.

=back

=head1 SEE ALSO

B<rwbag(1)>, B<rwbagbuild(1)>, B<rwbagtool(1)>, B<rwset(1)>,
B<rwsetbuild(1)>, B<silk(7)>

=cut

$SiLK: rwbagcat.pod cd09f0a5fcc6 2014-06-14 15:43:33Z mthomas $

Local Variables:
mode:text
indent-tabs-mode:nil
End:
